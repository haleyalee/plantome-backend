# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  plantome-backend

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-all-items.js
  getAllPlantsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-plants.getAllPlantsHandler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all plants from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PlantsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          PLANTS_TABLE: !Ref PlantsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /plants
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-by-id.js
  getPlantByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-plant-by-id.getPlantByIdHandler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one plant by id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PlantsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          PLANTS_TABLE: !Ref PlantsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /plant/{id}
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction


# This is a Lambda function config associated with the source code: delete-plant.js
  deletePlantFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/delete-plant.deletePlantHandler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP delete method to delete one plant by id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PlantsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          PLANTS_TABLE: !Ref PlantsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /plant/{id}
            Method: DELETE
            
  # This is a Lambda function config associated with the source code: put-item.js
  postPlantFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/post-plant.postPlantHandler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one plant to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PlantsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          PLANTS_TABLE: !Ref PlantsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /plant
            Method: POST
  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  PlantsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

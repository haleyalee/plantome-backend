AWSTemplateFormatVersion: 2010-09-09
Description: >-
  plantome-backend

Transform:
- AWS::Serverless-2016-10-31

Resources:

  ### PLANTS ###

  # This is a Lambda function config associated with the source code: get-all-plants.js
  getAllPlantsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-plants.getAllPlantsHandler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all plants from a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlantsTable
      Environment:
        Variables:
          PLANTS_TABLE: !Ref PlantsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /plants
            Method: GET

  # This is a Lambda function config associated with the source code: get-plant-by-id.js
  getPlantByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-plant-by-id.getPlantByIdHandler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one plant by id from a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlantsTable
      Environment:
        Variables:
          PLANTS_TABLE: !Ref PlantsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /plant/{id}
            Method: GET

# This is a Lambda function config associated with the source code: delete-plant.js
  deletePlantFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/delete-plant.deletePlantHandler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP delete method to delete one plant by id from a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlantsTable
      Environment:
        Variables:
          PLANTS_TABLE: !Ref PlantsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /plant/{id}
            Method: DELETE
            
  # This is a Lambda function config associated with the source code: put-item.js
  postPlantFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/post-plant.postPlantHandler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one plant to a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlantsTable
      Environment:
        Variables:
          PLANTS_TABLE: !Ref PlantsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /plant
            Method: POST
 
  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  PlantsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  
  ### CART ###

  # This is a Lambda function config associated with the source code: get-all-carts.js
  getAllCartsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-carts.getAllCartsHandler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all carts from a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CartTable
      Environment:
        Variables:
          CART_TABLE: !Ref CartTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /carts
            Method: GET
  
  # This is a Lambda function config associated with the source code: get-user-cart.js
  getUserCartFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-user-cart.getUserCartHandler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CartTable
      Environment:
        Variables:
          CART_TABLE: !Ref CartTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /cart/{id}
            Method: GET

  # This is a Lambda function config associated with the source code: post-cart.js
  postCartFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/post-cart.postCartHandler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add the cart to a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CartTable
      Environment:
        Variables:
          CART_TABLE: !Ref CartTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /cart
            Method: POST

  # DynamoDB table to store cart: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  CartTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  
Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
